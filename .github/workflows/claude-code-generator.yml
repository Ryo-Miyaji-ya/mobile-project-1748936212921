name: Claude Code Generator

on:
  workflow_dispatch:
    inputs:
      project_type:
        description: 'Project type (webapp, api, mobile, cli, library, bot)'
        required: true
        type: string
      tech_stack:
        description: 'Technology stack'
        required: true
        type: string
      requirements:
        description: 'Project requirements'
        required: true
        type: string
      slack_channel:
        description: 'Slack channel for notifications'
        required: true
        type: string
      slack_user:
        description: 'Slack user who requested'
        required: true
        type: string

jobs:
  generate-project:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          pip install requests

      - name: Generate project with Claude
        env:
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
        run: |
          cat > generate_project.py << 'EOF'
          import os
          import json
          import requests
          
          project_type = "${{ github.event.inputs.project_type }}"
          tech_stack = "${{ github.event.inputs.tech_stack }}"
          requirements = "${{ github.event.inputs.requirements }}"
          
          headers = {
              "x-api-key": os.environ["ANTHROPIC_API_KEY"],
              "content-type": "application/json",
              "anthropic-version": "2023-06-01"
          }
          
          prompt = f"""
新しい{project_type}プロジェクトを作成してください。

プロジェクト情報:
- タイプ: {project_type}
- 技術スタック: {tech_stack}
- 要件: {requirements}

以下を実装してください:
1. 適切なプロジェクト構造
2. 基本的な設定ファイル
3. エントリーポイントとサンプルコード
4. README.mdファイル
5. 要件に応じた基本機能

レスポンスは以下のJSON形式で返してください:
{{
  "files": [
    {{
      "path": "ファイルパス",
      "content": "ファイル内容"
    }}
  ],
  "summary": "実装内容の説明"
}}
"""
          
          data = {
              "model": "claude-3-sonnet-20240229",
              "max_tokens": 4000,
              "messages": [
                  {"role": "user", "content": prompt}
              ]
          }
          
          try:
              response = requests.post(
                  "https://api.anthropic.com/v1/messages",
                  headers=headers,
                  json=data,
                  timeout=30
              )
              
              if response.status_code == 200:
                  result = response.json()
                  content = result["content"][0]["text"]
                  print("Claude response received successfully")
                  
                  # JSONレスポンスをパース
                  import re
                  json_match = re.search(r'\{.*\}', content, re.DOTALL)
                  if json_match:
                      project_data = json.loads(json_match.group())
                      
                      # ファイルを作成
                      for file_info in project_data.get("files", []):
                          file_path = file_info["path"]
                          file_content = file_info["content"]
                          
                          # ディレクトリを作成
                          import os
                          os.makedirs(os.path.dirname(file_path) if os.path.dirname(file_path) else ".", exist_ok=True)
                          
                          # ファイルを書き込み
                          with open(file_path, "w", encoding="utf-8") as f:
                              f.write(file_content)
                      
                      print(f"Generated {len(project_data.get('files', []))} files")
                      summary = project_data.get('summary', 'Project generated successfully')
                      print(f"Summary: {summary}")
                      
                      # サマリーをファイルに保存
                      with open("generation_summary.txt", "w", encoding="utf-8") as f:
                          f.write(summary)
                  else:
                      print("Could not parse JSON from Claude response")
                      print(f"Raw response: {content}")
                      with open("generation_summary.txt", "w") as f:
                          f.write("Project structure created, but could not parse detailed response")
              else:
                  print(f"API Error: {response.status_code} - {response.text}")
                  with open("generation_summary.txt", "w") as f:
                      f.write(f"API Error: {response.status_code}")
          except Exception as e:
              print(f"Error calling Claude API: {e}")
              with open("generation_summary.txt", "w") as f:
                  f.write(f"Error: {e}")
          EOF
          
          python generate_project.py

      - name: Commit changes
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add .
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            git commit -m "feat: initialize ${{ github.event.inputs.project_type }} project with ${{ github.event.inputs.tech_stack }}"
            git push origin main
          fi

      - name: Create Pull Request
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          if git diff HEAD~1 --quiet; then
            echo "No changes, skipping PR creation"
          else
            git checkout -b develop-${{ github.run_id }} || git checkout develop-${{ github.run_id }}
            git push origin develop-${{ github.run_id }}
            
            SUMMARY="$(cat generation_summary.txt 2>/dev/null || echo 'Project generated successfully')"
            
            gh pr create --title "🚀 Initial project setup: ${{ github.event.inputs.project_type }}" --body "## 🎉 プロジェクト初期化完了

**プロジェクトタイプ**: ${{ github.event.inputs.project_type }}
**技術スタック**: ${{ github.event.inputs.tech_stack }}
**要求者**: <@${{ github.event.inputs.slack_user }}>

### 📋 要件
${{ github.event.inputs.requirements }}

### 🏗️ 実装内容
$SUMMARY

---
*このプロジェクトはClaude APIによって自動生成されました。*" --base main || echo "PR creation failed or already exists"
          fi

      - name: Notify Slack
        if: always()
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        run: |
          if [ "${{ job.status }}" = "success" ]; then
            MESSAGE="🎉 プロジェクト生成が完了しました！"
            COLOR="good"
          else
            MESSAGE="❌ プロジェクト生成でエラーが発生しました"
            COLOR="danger"
          fi
          
          SUMMARY="$(cat generation_summary.txt 2>/dev/null || echo 'Project generated')"
          REPO_URL="https://github.com/${{ github.repository }}"
          
          curl -X POST "$SLACK_WEBHOOK_URL" -H 'Content-type: application/json' --data "{
            \"text\": \"$MESSAGE\",
            \"attachments\": [{
              \"color\": \"$COLOR\",
              \"fields\": [
                {\"title\": \"プロジェクト\", \"value\": \"${{ github.repository }}\", \"short\": true},
                {\"title\": \"タイプ\", \"value\": \"${{ github.event.inputs.project_type }}\", \"short\": true},
                {\"title\": \"技術スタック\", \"value\": \"${{ github.event.inputs.tech_stack }}\", \"short\": true},
                {\"title\": \"実装内容\", \"value\": \"$SUMMARY\", \"short\": false}
              ],
              \"actions\": [
                {\"type\": \"button\", \"text\": \"リポジトリを確認\", \"url\": \"$REPO_URL\"}
              ]
            }]
          }" || echo "Slack notification failed"
